{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","autoFocus","getGifs","category","a","apiUrl","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","url","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","image","GifExpertApp","categories","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4MA0CeA,EArCK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEDC,mBAAS,IAFR,mBAE9BC,EAF8B,KAElBC,EAFkB,KAqBrC,OACI,sBAAMC,SAbW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,QAAU,IAE5BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,MAQlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAtBQ,SAACP,GACjBF,EAAcE,EAAEQ,OAAOF,QAsBfG,WAAS,O,+BCbVC,EAjBF,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,4DAEO,mCACTC,EAHE,uDAEO,mCAFP,cAGmEC,UAAUH,GAH7E,sBAKWI,MAAMF,GALjB,cAKFG,EALE,gBAMaA,EAAKC,OANlB,uBAMDC,EANC,EAMDA,KACDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAGD,EAAIC,GACPC,MAAOF,EAAIE,MACXC,IAAG,UAAEH,EAAII,cAAN,aAAE,EAAYC,iBAAiBF,QAXlC,kBAcDL,GAdC,4CAAH,sDCWEQ,EAXK,SAAC,GAAqB,EAApBL,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAG7B,OACI,sBAAKI,UAAU,yCAAf,UACI,qBAAKC,IAAKL,EAAKM,IAAKP,IACpB,4BAAIA,QC8BDQ,EAjCC,SAAC,GAAgB,IAAfpB,EAAc,EAAdA,SAAc,ECDJ,SAACA,GAAc,IAAD,EAEZf,mBAAS,CAC/BsB,KAAM,GACNc,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAmBtC,OAZAC,qBAAU,WAENzB,EAAQC,GACHyB,MAAK,SAAAX,GACFS,EAAS,CACLhB,KAAMO,EACNO,SAAQ,SAItB,CAACrB,IAEIsB,EDfwBI,CAAa1B,GAAhCc,EAHgB,EAGrBP,KAAac,EAHQ,EAGRA,QAUpB,OACI,sBAAKJ,UAAU,iBAAf,UACKI,GAAW,yCACZ,qBAAIJ,UAAU,mDAAd,UAAmEjB,EAAnE,OAGMc,EAAOL,KAAK,SAACkB,GACX,OACG,cAAC,EAAD,eAGKA,GAFCA,EAAMhB,WEUpBiB,EAjCM,WAEjB,IAFuB,EAIa3C,mBAFZ,CAAC,eAFF,mBAIhB4C,EAJgB,KAIJ7C,EAJI,KAcvB,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAIQ6C,EAAWpB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEAA,SAAYA,GADLA,U,MCtB/B8B,IAASC,OACP,cAAC,IAAMC,WAAP,UAEE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.7fe71d85.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nimport PropTypes from 'prop-types'\r\n\r\n// Desestructurar las props es mas sencillo que llamar a props.setCategories en este ejemplo\r\nconst AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const handleInput = (e) => {\r\n        setInputValue(e.target.value)\r\n        \r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        if( inputValue.trim().length >= 2){\r\n            // la funcion set si no quieres pasar la referencia de los valores del useState de un componente se puede realizar de esta manera, ya que por parametro llama a el valor con un callback y es más sencillo\r\n            setCategories( cats => [ inputValue, ...cats])\r\n            setInputValue('')\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInput}\r\n                autoFocus\r\n             />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory\r\n","\r\n\r\nconst getGifs = async ( category ) => {\r\n  \r\n        const apiKey = 'iMTXO0dBCgozr9iy5Wz1bt9nidIEw2rG'\r\n        const apiUrl = `https://api.giphy.com/v1/gifs/search?api_key=${apiKey}&q=${encodeURI(category)}&limit=12`\r\n        // encodeURI sirve para que al pasar un valor con espacios en una url estos espacios se reemplacen por valores que los navegadores puedan leer correctamente\r\n        const resp = await fetch(apiUrl)\r\n        const {data} = await resp.json()\r\n        const gifs = data.map( img => {\r\n            return {\r\n                id:img.id,\r\n                title: img.title,\r\n                url: img.images?.downsized_medium.url\r\n            }\r\n        })\r\n        return gifs;\r\n}\r\n\r\nexport default getGifs\r\n","import React from 'react'\r\n\r\nconst GifGridItem = ({id, title, url}) => {\r\n    \r\n    \r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGridItem\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n// import getGifs from '../helpers/getGifs';\r\nimport GifGridItem from './GifGridItem';\r\n\r\nconst GifGrid = ({category}) => {\r\n\r\n    // Al desestructurar, se puede renombrar de la siguiente forma, primero con el nombre que recoge el dato a desestructurar y después dos puntos y el alias, es decir data:alias\r\n    const {data:images, loading} = useFetchGifs(category);\r\n\r\n    // useEffect ejecuta el código dentro de la funcion cuando el componente es renderizado por primera vez, dentro de la funcion recibe el código que se quiere disparar al renderizarlo, después como segundo parametro de la funcion, se le pasa un array de dependencias, es decir, cuando cambia alguna dependencia, disparar el codigo de nuevo\r\n    // useEffect(() => {\r\n    //     getGifs(category)\r\n    //     .then(images => setImages(images))\r\n    // },[category])\r\n    \r\n   \r\n  \r\n    return (\r\n        <div className=\"gifs-container\">\r\n            {loading && <h2>Loading</h2>}\r\n            <h3 className=\"category-title animate__animated animate__fadeIn\">{ category } </h3>\r\n\r\n            \r\n                { images.map( (image) => {\r\n                    return (\r\n                       <GifGridItem\r\n                        key={image.id} \r\n                        // Con el operador spread utilizado de esta forma es posible mandar las props a un componente de forma independiente, para que se pueda desestructurar más facilmente\r\n                        {...image} \r\n                        />\r\n                    )\r\n                })}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGrid\r\n","import { useEffect, useState } from 'react'\r\nimport getGifs from '../helpers/getGifs'\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n    useEffect(() => {\r\n\r\n        getGifs(category)\r\n            .then(images => {\r\n                setState({\r\n                    data: images,\r\n                    loading:false\r\n                })\r\n            })\r\n\r\n    },[category])\r\n\r\n    return state;\r\n}\r\n\r\n","import React, { useState } from 'react'\r\nimport AddCategory from './components/AddCategory'\r\nimport GifGrid from './components/GifGrid'\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const arrayCategories = ['EVANGELION']\r\n\r\n    const [categories, setCategories] = useState(arrayCategories)\r\n\r\n    // const handleAdd = () => {\r\n    //     // Para usar setCategories se necesita utilizar el operador spread del array que NO hay que mutar, y con ese operador crea una copia de ese array u objeto, según lo que se haya creado, se necesitan las llaves [] para decirle que es un array, si categories fuera un objeto supongo que habría que utilizar {}\r\n    //     setCategories([...categories,'HunterXHunter'])\r\n\r\n    //     // Al recibir un callback la funcion, el parametro \"cats\" sería la variable \"categories\" en este caso, es decir, que el callback llama a la funcion donde se almacena la información del hook useState\r\n    //    setCategories( cats => [...cats, 'HunterXHunter'])\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories} />\r\n            <hr />\r\n\r\n            \r\n                {\r\n                    categories.map( category => (\r\n                        <GifGrid \r\n                        key = {category}\r\n                        category = {category} />\r\n                    ))\r\n                }\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import AddCategory from './components/AddCategory';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    \n    <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}